diff --git a/Externals/FFmpeg-bin b/Externals/FFmpeg-bin
--- a/Externals/FFmpeg-bin
+++ b/Externals/FFmpeg-bin
@@ -1 +1 @@
-Subproject commit 9bc087fbca36ce5a85eb4fd73f0c73813593e5a2
+Subproject commit 9bc087fbca36ce5a85eb4fd73f0c73813593e5a2-dirty
diff --git a/Externals/Qt b/Externals/Qt
--- a/Externals/Qt
+++ b/Externals/Qt
@@ -1 +1 @@
-Subproject commit bd088e81e72243a86cf41db049b62f28d956d4e2
+Subproject commit bd088e81e72243a86cf41db049b62f28d956d4e2-dirty
diff --git a/Externals/SDL/SDL b/Externals/SDL/SDL
--- a/Externals/SDL/SDL
+++ b/Externals/SDL/SDL
@@ -1 +1 @@
-Subproject commit 0bfeed061b10ea7dd37c88d9bae1824bad760f3a
+Subproject commit 0bfeed061b10ea7dd37c88d9bae1824bad760f3a-dirty
diff --git a/Externals/VulkanMemoryAllocator b/Externals/VulkanMemoryAllocator
--- a/Externals/VulkanMemoryAllocator
+++ b/Externals/VulkanMemoryAllocator
@@ -1 +1 @@
-Subproject commit c351692490513cdb0e5a2c925aaf7ea4a9b672f4
+Subproject commit c351692490513cdb0e5a2c925aaf7ea4a9b672f4-dirty
diff --git a/Externals/cubeb/cubeb b/Externals/cubeb/cubeb
--- a/Externals/cubeb/cubeb
+++ b/Externals/cubeb/cubeb
@@ -1 +1 @@
-Subproject commit 27d2a102b0b75d9e49d43bc1ea516233fb87d778
+Subproject commit 27d2a102b0b75d9e49d43bc1ea516233fb87d778-dirty
diff --git a/Externals/libspng/libspng b/Externals/libspng/libspng
--- a/Externals/libspng/libspng
+++ b/Externals/libspng/libspng
@@ -1 +1 @@
-Subproject commit dc5b1032c08efac68ad30170f7ccbf0aa8dd55c9
+Subproject commit dc5b1032c08efac68ad30170f7ccbf0aa8dd55c9-dirty
diff --git a/Externals/libusb/libusb b/Externals/libusb/libusb
--- a/Externals/libusb/libusb
+++ b/Externals/libusb/libusb
@@ -1 +1 @@
-Subproject commit ba698478afc3d3a72644eef9fc4cd24ce8383a4c
+Subproject commit ba698478afc3d3a72644eef9fc4cd24ce8383a4c-dirty
diff --git a/Externals/mGBA/mgba b/Externals/mGBA/mgba
--- a/Externals/mGBA/mgba
+++ b/Externals/mGBA/mgba
@@ -1 +1 @@
-Subproject commit 40d4c430fc36caeb7ea32fd39624947ed487d2f2
+Subproject commit 40d4c430fc36caeb7ea32fd39624947ed487d2f2-dirty
diff --git a/Externals/spirv_cross/SPIRV-Cross b/Externals/spirv_cross/SPIRV-Cross
--- a/Externals/spirv_cross/SPIRV-Cross
+++ b/Externals/spirv_cross/SPIRV-Cross
@@ -1 +1 @@
-Subproject commit 50b4d5389b6a06f86fb63a2848e1a7da6d9755ca
+Subproject commit 50b4d5389b6a06f86fb63a2848e1a7da6d9755ca-dirty
diff --git a/Source/Core/Core/Brawlback/BrawlbackUtility.cpp b/Source/Core/Core/Brawlback/BrawlbackUtility.cpp
index f780d84387..c244919ae5 100644
--- a/Source/Core/Core/Brawlback/BrawlbackUtility.cpp
+++ b/Source/Core/Core/Brawlback/BrawlbackUtility.cpp
@@ -3 +2,0 @@
-#include "VideoCommon/OnScreenDisplay.h"
@@ -9 +7,0 @@ namespace Brawlback
-
@@ -111,2 +109 @@ namespace Brawlback
-    }
-
+}  // namespace Match
@@ -114 +111,2 @@ namespace Brawlback
-    namespace Mem {
+namespace Mem
+{
@@ -126 +124,2 @@ namespace Brawlback
-        void print_half(u16 half) {
+  void print_half(u16 half)
+  {
@@ -133 +132,2 @@ namespace Brawlback
-        void print_word(u32 word) {
+  void print_word(u32 word)
+  {
@@ -145,4 +145,2 @@ namespace Brawlback
-
-
-
-        void fillByteVectorWithBuffer(std::vector<u8>& vec, u8* buf, size_t size) {
+  void fillByteVectorWithBuffer(std::vector<u8>& vec, u8* buf, size_t size)
+  {
@@ -150 +148,2 @@ namespace Brawlback
-            while (idx < size) {
+    while (idx < size)
+    {
@@ -155,0 +155 @@ namespace Brawlback
+}  // namespace Mem
@@ -157,4 +157,2 @@ namespace Brawlback
-        
-    }
-
-    namespace Sync {
+namespace Sync
+{
@@ -172 +170,2 @@ namespace Brawlback
-        std::string Sync::str_half(u16 half) {
+  std::string Sync::str_half(u16 half)
+  {
@@ -182,2 +181,4 @@ namespace Brawlback
-        void Sync::SyncLog(const std::string& msg) {
-            if (!msg.empty()) {
+  void Sync::SyncLog(const std::string& msg)
+  {
+    if (!msg.empty())
+    {
@@ -191 +192,2 @@ namespace Brawlback
-        std::string stringifyPad(const BrawlbackPad& pad) {
+  std::string stringifyPad(const BrawlbackPad& pad)
+  {
@@ -194 +196,3 @@ namespace Brawlback
-            std::string sticks = "[StickX: " + std::to_string(pad.stickX) + "] [StickY: " + std::to_string(pad.stickY) + "]\n";
+
+    std::string sticks =
+        "[StickX: " + std::to_string(pad.stickX) + "] [StickY: " + std::to_string(pad.stickY) + "]\n";
@@ -197 +201,2 @@ namespace Brawlback
-            std::string csticks = "[CStickX: " + std::to_string(pad.cStickX) + "] [CStickY: " + std::to_string(pad.cStickY) + "]\n";
+    std::string csticks = "[CStickX: " + std::to_string(pad.cStickX) +
+                          "] [CStickY: " + std::to_string(pad.cStickY) + "]\n";
@@ -200 +205,4 @@ namespace Brawlback
-            std::string triggers = "[LTrigger: " + std::to_string(pad.LTrigger) + "] [RTrigger: " + std::to_string(pad.RTrigger) + "]\n";
+    std::string triggers = "[LTrigger: " + std::to_string(pad.LTrigger) +
+                           "] [RTrigger: " + std::to_string(pad.RTrigger) + "] " +
+                           "[LAnalogue: " + std::to_string(pad.LAnalogue) + "] " +
+                           "[RAnalogue: " + std::to_string(pad.RAnalogue) + "]\n";
@@ -208 +216,2 @@ namespace Brawlback
-        std::string Sync::stringifyFramedata(const PlayerFrameData& pfd) {
+  std::string Sync::stringifyFramedata(const PlayerFrameData& pfd)
+  {
@@ -212 +221,2 @@ namespace Brawlback
-            info.append("[Frame " + std::to_string(pfd.frame) + "] [P" + std::to_string(pfd.playerIdx) + "]\n");
+    info.append("[Frame " + std::to_string(pfd.frame) + "] [P" + std::to_string(pfd.playerIdx) +
+                "]\n");
@@ -230,0 +241 @@ namespace Brawlback
+}  // namespace Sync
@@ -232,3 +243,2 @@ namespace Brawlback
-    }
-
-    namespace Dump {
+namespace Dump
+{
@@ -245,2 +255 @@ namespace Brawlback
-                ERROR_LOG_FMT(BRAWLBACK,
-                              "Failed to dump {}: Can't open file\n", filename);
+      ERROR_LOG_FMT(BRAWLBACK, "Failed to dump {}: Can't open file\n", filename);
@@ -252,2 +261 @@ namespace Brawlback
-                ERROR_LOG_FMT(BRAWLBACK,
-                              "Failed to dump {}: Failed to write to file\n", filename);
+      ERROR_LOG_FMT(BRAWLBACK, "Failed to dump {}: Failed to write to file\n", filename);
@@ -257 +265,2 @@ namespace Brawlback
-        void DoMemDumpIteration(int& dump_num) {
+  void DoMemDumpIteration(int& dump_num)
+  {
@@ -271 +280,2 @@ namespace Brawlback
-        void DumpMem(AddressSpace::Type memType, const std::string& dumpPath) {
+  void DumpMem(AddressSpace::Type memType, const std::string& dumpPath)
+  {
@@ -273,3 +283 @@ namespace Brawlback
-            DumpArray(dumpPath, accessors->begin(),
-                    std::distance(accessors->begin(), accessors->end()));
-        }
+    DumpArray(dumpPath, accessors->begin(), std::distance(accessors->begin(), accessors->end()));
@@ -276,0 +285 @@ namespace Brawlback
+}  // namespace Dump
@@ -278 +287 @@ namespace Brawlback
-}
+}  // namespace Brawlback
diff --git a/Source/Core/Core/Brawlback/BrawlbackUtility.h b/Source/Core/Core/Brawlback/BrawlbackUtility.h
index 23b7ec750b..55efe112ee 100644
--- a/Source/Core/Core/Brawlback/BrawlbackUtility.h
+++ b/Source/Core/Core/Brawlback/BrawlbackUtility.h
@@ -7,0 +8 @@
+#include <intrin.h>
@@ -19 +20 @@
-
+#include "brawlback-common/BBConst.h"
@@ -64,0 +66,2 @@ namespace Brawlback {
+      CMD_SAVESTATE_REGION = 22,
+
@@ -102,0 +106,37 @@ namespace Brawlback {
+    // https://mklimenko.github.io/english/2018/08/22/robust-endian-swap/
+    template <typename T>
+    T swap_endian(T val)
+    {
+      union U
+      {
+        T val;
+        std::array<std::uint8_t, sizeof(T)> raw;
+      } src, dst;
+
+      src.val = val;
+      std::reverse_copy(src.raw.begin(), src.raw.end(), dst.raw.begin());
+      val = dst.val;
+      return val;
+    }
+
+    inline void SwapPlayerFrameDataEndianness(PlayerFrameData& pfd) {
+        pfd.frame = swap_endian(pfd.frame);
+        pfd.syncData.anim = swap_endian(pfd.syncData.anim);
+        pfd.syncData.locX = swap_endian(pfd.syncData.locX);
+        pfd.syncData.locY = swap_endian(pfd.syncData.locY);
+        pfd.syncData.percent = swap_endian(pfd.syncData.percent);
+        pfd.randomSeed = swap_endian(pfd.randomSeed);
+    }
+    inline void SwapFrameDataEndianness(FrameData& fd) {
+        for (int i = 0; i < MAX_NUM_PLAYERS; i++) {
+            SwapPlayerFrameDataEndianness(fd.playerFrameDatas[i]);
+        }
+        swap_endian(fd.randomSeed);
+    }
+
+    inline void PrintSyncData(const SyncData& data) {
+        INFO_LOG_FMT(
+            BRAWLBACK,
+            "xPos = {}  yPos = {}  facingDir = {}  anim = {}  percent = {}  stocks = {}\n",
+            data.locX, data.locY, (s32)data.facingDir, data.anim, data.percent, (u32)data.stocks);
+    }
@@ -134,2 +173,0 @@ namespace Brawlback {
-    int SavestateChecksum(std::vector<ssBackupLoc>* backupLocs);
-
@@ -173,2 +211,4 @@ namespace Brawlback {
-    inline int MAX(int x, int y) { return (((x) > (y)) ? (x) : (y)); }
-    inline int MIN(int x, int y) { return (((x) < (y)) ? (x) : (y)); }
+    template <typename T>
+    inline T MAX(T x, T y) { return (((x) > (y)) ? (x) : (y)); }
+    template <typename T>
+    inline T MIN(T x, T y) { return (((x) < (y)) ? (x) : (y)); }
@@ -176 +216,2 @@ namespace Brawlback {
-    inline int RANGE(int i, int min, int max) { return ((i < min) || (i > max) ? 0 : 1); }
+    template <typename T>
+    inline T RANGE(T i, T min, T max) { return ((i < min) || (i > max) ? 0 : 1); }
diff --git a/Source/Core/Core/Brawlback/MemRegions.h b/Source/Core/Core/Brawlback/MemRegions.h
index c50fa784e1..ba9cf08a1a 100644
--- a/Source/Core/Core/Brawlback/MemRegions.h
+++ b/Source/Core/Core/Brawlback/MemRegions.h
@@ -3 +2,0 @@
-
@@ -8 +7,2 @@
-namespace MemRegions {
+namespace MemRegions
+{
@@ -54 +53,0 @@ static std::vector<ssBackupLoc> memRegions = {
-
@@ -57 +55,0 @@ static std::vector<ssBackupLoc> memRegions = {
-
@@ -61 +59,2 @@ static std::vector<ssBackupLoc> memRegions = {
-    //{0x9151fa00, 0x917C9400, nullptr, "first half of Fighter1Resource"}, // first half of Fighter1Resource
+    //{0x9151fa00, 0x917C9400, nullptr, "first half of Fighter1Resource"}, // first half of
+    //Fighter1Resource
@@ -65 +64,2 @@ static std::vector<ssBackupLoc> memRegions = {
-    //{0x91b04c80, 0x91DAE680, nullptr, "Fighter2Resource first half"}, // Fighter2Resource first half
+    //{0x91b04c80, 0x91DAE680, nullptr, "Fighter2Resource first half"}, // Fighter2Resource first
+    //half
@@ -70 +69,0 @@ static std::vector<ssBackupLoc> memRegions = {
-
@@ -76 +74,0 @@ static std::vector<ssBackupLoc> memRegions = {
-
@@ -79 +77,2 @@ static std::vector<ssBackupLoc> memRegions = {
-    { 0x90ff5120, 0x90ff5130, nullptr, "GlobalMode1" }, // two GlobalMode addrs that apparently change sometimes
+    {0x90ff5120, 0x90ff5130, nullptr,
+     "GlobalMode1"},  // two GlobalMode addrs that apparently change sometimes
@@ -84 +82,0 @@ static std::vector<ssBackupLoc> memRegions = {
-
diff --git a/Source/Core/Core/Brawlback/Netplay/Matchmaking.cpp b/Source/Core/Core/Brawlback/Netplay/Matchmaking.cpp
index 83f92225af..4c72d195e7 100644
--- a/Source/Core/Core/Brawlback/Netplay/Matchmaking.cpp
+++ b/Source/Core/Core/Brawlback/Netplay/Matchmaking.cpp
@@ -405 +405 @@ void Matchmaking::startMatchmaking()
-	char *IP;
+	char *IP = nullptr;
@@ -619,0 +620 @@ void Matchmaking::handleMatchmaking()
+
diff --git a/Source/Core/Core/Brawlback/Savestate.cpp b/Source/Core/Core/Brawlback/Savestate.cpp
index 519115fa23..47e80eefc6 100644
--- a/Source/Core/Core/Brawlback/Savestate.cpp
+++ b/Source/Core/Core/Brawlback/Savestate.cpp
@@ -85,2 +85,4 @@ typedef std::vector<SlippiUtility::Savestate::ssBackupLoc>::iterator backupLocIt
-void captureMemRegions(backupLocIterator start, backupLocIterator end) {
-    for (auto it = start; it != end; ++it) {
+void captureMemRegions(backupLocIterator start, backupLocIterator end)
+{
+  for (auto it = start; it != end; ++it)
+  {
@@ -137 +138,0 @@ void BrawlbackSavestate::Load(std::vector<PreserveBlock> blocks)
-  
diff --git a/Source/Core/Core/Brawlback/Savestate.h b/Source/Core/Core/Brawlback/Savestate.h
index 98a7bd391b..25b0036d06 100644
--- a/Source/Core/Core/Brawlback/Savestate.h
+++ b/Source/Core/Core/Brawlback/Savestate.h
@@ -11 +10,0 @@ class BrawlbackSavestate
-
@@ -13,2 +11,0 @@ public:
-
-
@@ -18 +14,0 @@ public:
-
@@ -28,2 +23,0 @@ public:
-private:
-
@@ -30,0 +25 @@ private:
+private:
@@ -32 +27,2 @@ private:
-    std::unordered_map<PreserveBlock, std::vector<u8>, preserve_hash_fn, preserve_eq_fn> preservationMap;
+  std::unordered_map<PreserveBlock, std::vector<u8>, preserve_hash_fn, preserve_eq_fn>
+      preservationMap;
@@ -37 +32,0 @@ private:
-
@@ -42,2 +36,0 @@ private:
-
-
diff --git a/Source/Core/Core/Brawlback/SlippiUtility.cpp b/Source/Core/Core/Brawlback/SlippiUtility.cpp
index a3cb338d21..e2607d7e7a 100644
--- a/Source/Core/Core/Brawlback/SlippiUtility.cpp
+++ b/Source/Core/Core/Brawlback/SlippiUtility.cpp
@@ -3 +2,0 @@
-
@@ -7 +5,0 @@ namespace SlippiUtility
-
@@ -101 +98,0 @@ namespace SlippiUtility
-
@@ -104,4 +100,0 @@ namespace SlippiUtility
-
-
-
-
@@ -200,2 +193 @@ namespace SlippiUtility
-
-}
+}  // namespace SlippiUtility
diff --git a/Source/Core/Core/Brawlback/SlippiUtility.h b/Source/Core/Core/Brawlback/SlippiUtility.h
index 6d4c461bc1..5b3067aafd 100644
--- a/Source/Core/Core/Brawlback/SlippiUtility.h
+++ b/Source/Core/Core/Brawlback/SlippiUtility.h
@@ -3 +2,0 @@
-#include "Common/CommonTypes.h"
@@ -5,0 +5 @@
+#include "Common/CommonTypes.h"
@@ -15 +15,2 @@ If the Slippi team feels uncomfortable with their code being used in this projec
-having this code in this one file makes it easier to replace it with our own logic if the need should arise.
+having this code in this one file makes it easier to replace it with our own logic if the need
+should arise.
@@ -63 +63,0 @@ namespace SlippiUtility
-
@@ -71 +70,0 @@ namespace SlippiUtility
-
@@ -86 +85 @@ namespace SlippiUtility
-}
+}  // namespace SlippiUtility
diff --git a/Source/Core/Core/Brawlback/TimeSync.cpp b/Source/Core/Core/Brawlback/TimeSync.cpp
index 444d4ef4af..87c6a83e13 100644
--- a/Source/Core/Core/Brawlback/TimeSync.cpp
+++ b/Source/Core/Core/Brawlback/TimeSync.cpp
@@ -28,5 +28,14 @@ bool TimeSync::shouldStallFrame(s32 currentFrame, s32 latestRemoteFrame, u8 numP
-    #if ROLLBACK_IMPL
-    if (frameDiff >= MAX_ROLLBACK_FRAMES) {
-    #else
-    if (frameDiff > FRAME_DELAY) { 
-    #endif
+    bool frameDiffCheck;
+    if (ROLLBACK_IMPL)
+    {
+      INFO_LOG_FMT(BRAWLBACK, "ROLLBACK IS ENABLED! FRAMEDIFF: {}", dispStr.str());
+      frameDiffCheck = frameDiff >= MAX_ROLLBACK_FRAMES;
+    }
+    else
+    {
+      INFO_LOG_FMT(BRAWLBACK, "ROLLBACK IS NOT ENABLED! FRAMEDIFF: {}", dispStr.str());
+      frameDiffCheck = frameDiff > FRAME_DELAY;
+    }
+
+    if (frameDiffCheck)
+    {
diff --git a/Source/Core/Core/Brawlback/include/brawlback-common b/Source/Core/Core/Brawlback/include/brawlback-common
--- a/Source/Core/Core/Brawlback/include/brawlback-common
+++ b/Source/Core/Core/Brawlback/include/brawlback-common
@@ -1 +1 @@
-Subproject commit b1d80b47234103bdf87eed8204a7b0d60a686cfe
+Subproject commit b1d80b47234103bdf87eed8204a7b0d60a686cfe-dirty
diff --git a/Source/Core/Core/HW/EXI/EXIBrawlback.cpp b/Source/Core/Core/HW/EXI/EXIBrawlback.cpp
index f23b77da8d..348ef6577c 100644
--- a/Source/Core/Core/HW/EXI/EXIBrawlback.cpp
+++ b/Source/Core/Core/HW/EXI/EXIBrawlback.cpp
@@ -22,8 +21,0 @@ std::mutex remotePadQueueMutex = std::mutex();
-template <class T>
-T swap_endian(T in)
-{
-  char* const p = reinterpret_cast<char*>(&in);
-  for (size_t i = 0; i < sizeof(T) / 2; ++i)
-    std::swap(p[i], p[sizeof(T) - i - 1]);
-  return in;
-}
@@ -307 +299,2 @@ void CEXIBrawlback::handleLocalPadData(u8* data)
-  u32 frame = SlippiUtility::Mem::readWord(data, idx, 999, 0);  // properly switched endianness
+  SwapPlayerFrameDataEndianness(playerFramedata);
+  auto frame = playerFramedata.frame;
@@ -309 +301,0 @@ void CEXIBrawlback::handleLocalPadData(u8* data)
-  playerFramedata.frame = frame;  // properly switched endianness
@@ -628 +620 @@ void CEXIBrawlback::handleSendInputs(u32 frame)
-  minAckFrame = MIN(minAckFrame, frame);
+  minAckFrame = MIN<u32>(minAckFrame, frame);
diff --git a/Source/Core/Core/HW/EXI/EXIBrawlback.h b/Source/Core/Core/HW/EXI/EXIBrawlback.h
index 1f30eb5247..77f68482c8 100644
--- a/Source/Core/Core/HW/EXI/EXIBrawlback.h
+++ b/Source/Core/Core/HW/EXI/EXIBrawlback.h
@@ -111 +111,2 @@ private:
-  int latestConfirmedFrame = 0; // Tracks the last frame where we synchronized the game state with the remote client
+  int latestConfirmedFrame =
+      0;  // Tracks the last frame where we synchronized the game state with the remote client
@@ -137,2 +138,2 @@ private:
-
-  // remote player input history (indexes are player indexes). Always holds FRAMEDATA_MAX_QUEUE_SIZE of past inputs
+  // remote player input history (indexes are player indexes). Always holds FRAMEDATA_MAX_QUEUE_SIZE
+  // of past inputs
diff --git a/Source/Core/DolphinQt/DolphinQt.vcxproj.user b/Source/Core/DolphinQt/DolphinQt.vcxproj.user
index 22760f9a5b..98687ac269 100644
--- a/Source/Core/DolphinQt/DolphinQt.vcxproj.user
+++ b/Source/Core/DolphinQt/DolphinQt.vcxproj.user
@@ -2 +2 @@
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
diff --git a/gitchanges b/gitchanges
new file mode 100644
index 0000000000..21d56584ca
--- /dev/null
+++ b/gitchanges
@@ -0,0 +1,402 @@
+diff --git a/Externals/FFmpeg-bin b/Externals/FFmpeg-bin
+--- a/Externals/FFmpeg-bin
++++ b/Externals/FFmpeg-bin
+@@ -1 +1 @@
+-Subproject commit 9bc087fbca36ce5a85eb4fd73f0c73813593e5a2
++Subproject commit 9bc087fbca36ce5a85eb4fd73f0c73813593e5a2-dirty
+diff --git a/Externals/Qt b/Externals/Qt
+--- a/Externals/Qt
++++ b/Externals/Qt
+@@ -1 +1 @@
+-Subproject commit bd088e81e72243a86cf41db049b62f28d956d4e2
++Subproject commit bd088e81e72243a86cf41db049b62f28d956d4e2-dirty
+diff --git a/Externals/SDL/SDL b/Externals/SDL/SDL
+--- a/Externals/SDL/SDL
++++ b/Externals/SDL/SDL
+@@ -1 +1 @@
+-Subproject commit 0bfeed061b10ea7dd37c88d9bae1824bad760f3a
++Subproject commit 0bfeed061b10ea7dd37c88d9bae1824bad760f3a-dirty
+diff --git a/Externals/VulkanMemoryAllocator b/Externals/VulkanMemoryAllocator
+--- a/Externals/VulkanMemoryAllocator
++++ b/Externals/VulkanMemoryAllocator
+@@ -1 +1 @@
+-Subproject commit c351692490513cdb0e5a2c925aaf7ea4a9b672f4
++Subproject commit c351692490513cdb0e5a2c925aaf7ea4a9b672f4-dirty
+diff --git a/Externals/cubeb/cubeb b/Externals/cubeb/cubeb
+--- a/Externals/cubeb/cubeb
++++ b/Externals/cubeb/cubeb
+@@ -1 +1 @@
+-Subproject commit 27d2a102b0b75d9e49d43bc1ea516233fb87d778
++Subproject commit 27d2a102b0b75d9e49d43bc1ea516233fb87d778-dirty
+diff --git a/Externals/libspng/libspng b/Externals/libspng/libspng
+--- a/Externals/libspng/libspng
++++ b/Externals/libspng/libspng
+@@ -1 +1 @@
+-Subproject commit dc5b1032c08efac68ad30170f7ccbf0aa8dd55c9
++Subproject commit dc5b1032c08efac68ad30170f7ccbf0aa8dd55c9-dirty
+diff --git a/Externals/libusb/libusb b/Externals/libusb/libusb
+--- a/Externals/libusb/libusb
++++ b/Externals/libusb/libusb
+@@ -1 +1 @@
+-Subproject commit ba698478afc3d3a72644eef9fc4cd24ce8383a4c
++Subproject commit ba698478afc3d3a72644eef9fc4cd24ce8383a4c-dirty
+diff --git a/Externals/mGBA/mgba b/Externals/mGBA/mgba
+--- a/Externals/mGBA/mgba
++++ b/Externals/mGBA/mgba
+@@ -1 +1 @@
+-Subproject commit 40d4c430fc36caeb7ea32fd39624947ed487d2f2
++Subproject commit 40d4c430fc36caeb7ea32fd39624947ed487d2f2-dirty
+diff --git a/Externals/spirv_cross/SPIRV-Cross b/Externals/spirv_cross/SPIRV-Cross
+--- a/Externals/spirv_cross/SPIRV-Cross
++++ b/Externals/spirv_cross/SPIRV-Cross
+@@ -1 +1 @@
+-Subproject commit 50b4d5389b6a06f86fb63a2848e1a7da6d9755ca
++Subproject commit 50b4d5389b6a06f86fb63a2848e1a7da6d9755ca-dirty
+diff --git a/Source/Core/Core/Brawlback/BrawlbackUtility.cpp b/Source/Core/Core/Brawlback/BrawlbackUtility.cpp
+index f780d84387..c244919ae5 100644
+--- a/Source/Core/Core/Brawlback/BrawlbackUtility.cpp
++++ b/Source/Core/Core/Brawlback/BrawlbackUtility.cpp
+@@ -3 +2,0 @@
+-#include "VideoCommon/OnScreenDisplay.h"
+@@ -9 +7,0 @@ namespace Brawlback
+-
+@@ -111,2 +109 @@ namespace Brawlback
+-    }
+-
++}  // namespace Match
+@@ -114 +111,2 @@ namespace Brawlback
+-    namespace Mem {
++namespace Mem
++{
+@@ -126 +124,2 @@ namespace Brawlback
+-        void print_half(u16 half) {
++  void print_half(u16 half)
++  {
+@@ -133 +132,2 @@ namespace Brawlback
+-        void print_word(u32 word) {
++  void print_word(u32 word)
++  {
+@@ -145,4 +145,2 @@ namespace Brawlback
+-
+-
+-
+-        void fillByteVectorWithBuffer(std::vector<u8>& vec, u8* buf, size_t size) {
++  void fillByteVectorWithBuffer(std::vector<u8>& vec, u8* buf, size_t size)
++  {
+@@ -150 +148,2 @@ namespace Brawlback
+-            while (idx < size) {
++    while (idx < size)
++    {
+@@ -155,0 +155 @@ namespace Brawlback
++}  // namespace Mem
+@@ -157,4 +157,2 @@ namespace Brawlback
+-        
+-    }
+-
+-    namespace Sync {
++namespace Sync
++{
+@@ -172 +170,2 @@ namespace Brawlback
+-        std::string Sync::str_half(u16 half) {
++  std::string Sync::str_half(u16 half)
++  {
+@@ -182,2 +181,4 @@ namespace Brawlback
+-        void Sync::SyncLog(const std::string& msg) {
+-            if (!msg.empty()) {
++  void Sync::SyncLog(const std::string& msg)
++  {
++    if (!msg.empty())
++    {
+@@ -191 +192,2 @@ namespace Brawlback
+-        std::string stringifyPad(const BrawlbackPad& pad) {
++  std::string stringifyPad(const BrawlbackPad& pad)
++  {
+@@ -194 +196,3 @@ namespace Brawlback
+-            std::string sticks = "[StickX: " + std::to_string(pad.stickX) + "] [StickY: " + std::to_string(pad.stickY) + "]\n";
++
++    std::string sticks =
++        "[StickX: " + std::to_string(pad.stickX) + "] [StickY: " + std::to_string(pad.stickY) + "]\n";
+@@ -197 +201,2 @@ namespace Brawlback
+-            std::string csticks = "[CStickX: " + std::to_string(pad.cStickX) + "] [CStickY: " + std::to_string(pad.cStickY) + "]\n";
++    std::string csticks = "[CStickX: " + std::to_string(pad.cStickX) +
++                          "] [CStickY: " + std::to_string(pad.cStickY) + "]\n";
+@@ -200 +205,4 @@ namespace Brawlback
+-            std::string triggers = "[LTrigger: " + std::to_string(pad.LTrigger) + "] [RTrigger: " + std::to_string(pad.RTrigger) + "]\n";
++    std::string triggers = "[LTrigger: " + std::to_string(pad.LTrigger) +
++                           "] [RTrigger: " + std::to_string(pad.RTrigger) + "] " +
++                           "[LAnalogue: " + std::to_string(pad.LAnalogue) + "] " +
++                           "[RAnalogue: " + std::to_string(pad.RAnalogue) + "]\n";
+@@ -208 +216,2 @@ namespace Brawlback
+-        std::string Sync::stringifyFramedata(const PlayerFrameData& pfd) {
++  std::string Sync::stringifyFramedata(const PlayerFrameData& pfd)
++  {
+@@ -212 +221,2 @@ namespace Brawlback
+-            info.append("[Frame " + std::to_string(pfd.frame) + "] [P" + std::to_string(pfd.playerIdx) + "]\n");
++    info.append("[Frame " + std::to_string(pfd.frame) + "] [P" + std::to_string(pfd.playerIdx) +
++                "]\n");
+@@ -230,0 +241 @@ namespace Brawlback
++}  // namespace Sync
+@@ -232,3 +243,2 @@ namespace Brawlback
+-    }
+-
+-    namespace Dump {
++namespace Dump
++{
+@@ -245,2 +255 @@ namespace Brawlback
+-                ERROR_LOG_FMT(BRAWLBACK,
+-                              "Failed to dump {}: Can't open file\n", filename);
++      ERROR_LOG_FMT(BRAWLBACK, "Failed to dump {}: Can't open file\n", filename);
+@@ -252,2 +261 @@ namespace Brawlback
+-                ERROR_LOG_FMT(BRAWLBACK,
+-                              "Failed to dump {}: Failed to write to file\n", filename);
++      ERROR_LOG_FMT(BRAWLBACK, "Failed to dump {}: Failed to write to file\n", filename);
+@@ -257 +265,2 @@ namespace Brawlback
+-        void DoMemDumpIteration(int& dump_num) {
++  void DoMemDumpIteration(int& dump_num)
++  {
+@@ -271 +280,2 @@ namespace Brawlback
+-        void DumpMem(AddressSpace::Type memType, const std::string& dumpPath) {
++  void DumpMem(AddressSpace::Type memType, const std::string& dumpPath)
++  {
+@@ -273,3 +283 @@ namespace Brawlback
+-            DumpArray(dumpPath, accessors->begin(),
+-                    std::distance(accessors->begin(), accessors->end()));
+-        }
++    DumpArray(dumpPath, accessors->begin(), std::distance(accessors->begin(), accessors->end()));
+@@ -276,0 +285 @@ namespace Brawlback
++}  // namespace Dump
+@@ -278 +287 @@ namespace Brawlback
+-}
++}  // namespace Brawlback
+diff --git a/Source/Core/Core/Brawlback/BrawlbackUtility.h b/Source/Core/Core/Brawlback/BrawlbackUtility.h
+index 23b7ec750b..55efe112ee 100644
+--- a/Source/Core/Core/Brawlback/BrawlbackUtility.h
++++ b/Source/Core/Core/Brawlback/BrawlbackUtility.h
+@@ -7,0 +8 @@
++#include <intrin.h>
+@@ -19 +20 @@
+-
++#include "brawlback-common/BBConst.h"
+@@ -64,0 +66,2 @@ namespace Brawlback {
++      CMD_SAVESTATE_REGION = 22,
++
+@@ -102,0 +106,37 @@ namespace Brawlback {
++    // https://mklimenko.github.io/english/2018/08/22/robust-endian-swap/
++    template <typename T>
++    T swap_endian(T val)
++    {
++      union U
++      {
++        T val;
++        std::array<std::uint8_t, sizeof(T)> raw;
++      } src, dst;
++
++      src.val = val;
++      std::reverse_copy(src.raw.begin(), src.raw.end(), dst.raw.begin());
++      val = dst.val;
++      return val;
++    }
++
++    inline void SwapPlayerFrameDataEndianness(PlayerFrameData& pfd) {
++        pfd.frame = swap_endian(pfd.frame);
++        pfd.syncData.anim = swap_endian(pfd.syncData.anim);
++        pfd.syncData.locX = swap_endian(pfd.syncData.locX);
++        pfd.syncData.locY = swap_endian(pfd.syncData.locY);
++        pfd.syncData.percent = swap_endian(pfd.syncData.percent);
++        pfd.randomSeed = swap_endian(pfd.randomSeed);
++    }
++    inline void SwapFrameDataEndianness(FrameData& fd) {
++        for (int i = 0; i < MAX_NUM_PLAYERS; i++) {
++            SwapPlayerFrameDataEndianness(fd.playerFrameDatas[i]);
++        }
++        swap_endian(fd.randomSeed);
++    }
++
++    inline void PrintSyncData(const SyncData& data) {
++        INFO_LOG_FMT(
++            BRAWLBACK,
++            "xPos = {}  yPos = {}  facingDir = {}  anim = {}  percent = {}  stocks = {}\n",
++            data.locX, data.locY, (s32)data.facingDir, data.anim, data.percent, (u32)data.stocks);
++    }
+@@ -134,2 +173,0 @@ namespace Brawlback {
+-    int SavestateChecksum(std::vector<ssBackupLoc>* backupLocs);
+-
+@@ -173,2 +211,4 @@ namespace Brawlback {
+-    inline int MAX(int x, int y) { return (((x) > (y)) ? (x) : (y)); }
+-    inline int MIN(int x, int y) { return (((x) < (y)) ? (x) : (y)); }
++    template <typename T>
++    inline T MAX(T x, T y) { return (((x) > (y)) ? (x) : (y)); }
++    template <typename T>
++    inline T MIN(T x, T y) { return (((x) < (y)) ? (x) : (y)); }
+@@ -176 +216,2 @@ namespace Brawlback {
+-    inline int RANGE(int i, int min, int max) { return ((i < min) || (i > max) ? 0 : 1); }
++    template <typename T>
++    inline T RANGE(T i, T min, T max) { return ((i < min) || (i > max) ? 0 : 1); }
+diff --git a/Source/Core/Core/Brawlback/MemRegions.h b/Source/Core/Core/Brawlback/MemRegions.h
+index c50fa784e1..ba9cf08a1a 100644
+--- a/Source/Core/Core/Brawlback/MemRegions.h
++++ b/Source/Core/Core/Brawlback/MemRegions.h
+@@ -3 +2,0 @@
+-
+@@ -8 +7,2 @@
+-namespace MemRegions {
++namespace MemRegions
++{
+@@ -54 +53,0 @@ static std::vector<ssBackupLoc> memRegions = {
+-
+@@ -57 +55,0 @@ static std::vector<ssBackupLoc> memRegions = {
+-
+@@ -61 +59,2 @@ static std::vector<ssBackupLoc> memRegions = {
+-    //{0x9151fa00, 0x917C9400, nullptr, "first half of Fighter1Resource"}, // first half of Fighter1Resource
++    //{0x9151fa00, 0x917C9400, nullptr, "first half of Fighter1Resource"}, // first half of
++    //Fighter1Resource
+@@ -65 +64,2 @@ static std::vector<ssBackupLoc> memRegions = {
+-    //{0x91b04c80, 0x91DAE680, nullptr, "Fighter2Resource first half"}, // Fighter2Resource first half
++    //{0x91b04c80, 0x91DAE680, nullptr, "Fighter2Resource first half"}, // Fighter2Resource first
++    //half
+@@ -70 +69,0 @@ static std::vector<ssBackupLoc> memRegions = {
+-
+@@ -76 +74,0 @@ static std::vector<ssBackupLoc> memRegions = {
+-
+@@ -79 +77,2 @@ static std::vector<ssBackupLoc> memRegions = {
+-    { 0x90ff5120, 0x90ff5130, nullptr, "GlobalMode1" }, // two GlobalMode addrs that apparently change sometimes
++    {0x90ff5120, 0x90ff5130, nullptr,
++     "GlobalMode1"},  // two GlobalMode addrs that apparently change sometimes
+@@ -84 +82,0 @@ static std::vector<ssBackupLoc> memRegions = {
+-
+diff --git a/Source/Core/Core/Brawlback/Netplay/Matchmaking.cpp b/Source/Core/Core/Brawlback/Netplay/Matchmaking.cpp
+index 83f92225af..4c72d195e7 100644
+--- a/Source/Core/Core/Brawlback/Netplay/Matchmaking.cpp
++++ b/Source/Core/Core/Brawlback/Netplay/Matchmaking.cpp
+@@ -405 +405 @@ void Matchmaking::startMatchmaking()
+-	char *IP;
++	char *IP = nullptr;
+@@ -619,0 +620 @@ void Matchmaking::handleMatchmaking()
++
+diff --git a/Source/Core/Core/Brawlback/Savestate.cpp b/Source/Core/Core/Brawlback/Savestate.cpp
+index 519115fa23..47e80eefc6 100644
+--- a/Source/Core/Core/Brawlback/Savestate.cpp
++++ b/Source/Core/Core/Brawlback/Savestate.cpp
+@@ -85,2 +85,4 @@ typedef std::vector<SlippiUtility::Savestate::ssBackupLoc>::iterator backupLocIt
+-void captureMemRegions(backupLocIterator start, backupLocIterator end) {
+-    for (auto it = start; it != end; ++it) {
++void captureMemRegions(backupLocIterator start, backupLocIterator end)
++{
++  for (auto it = start; it != end; ++it)
++  {
+@@ -137 +138,0 @@ void BrawlbackSavestate::Load(std::vector<PreserveBlock> blocks)
+-  
+diff --git a/Source/Core/Core/Brawlback/Savestate.h b/Source/Core/Core/Brawlback/Savestate.h
+index 98a7bd391b..25b0036d06 100644
+--- a/Source/Core/Core/Brawlback/Savestate.h
++++ b/Source/Core/Core/Brawlback/Savestate.h
+@@ -11 +10,0 @@ class BrawlbackSavestate
+-
+@@ -13,2 +11,0 @@ public:
+-
+-
+@@ -18 +14,0 @@ public:
+-
+@@ -28,2 +23,0 @@ public:
+-private:
+-
+@@ -30,0 +25 @@ private:
++private:
+@@ -32 +27,2 @@ private:
+-    std::unordered_map<PreserveBlock, std::vector<u8>, preserve_hash_fn, preserve_eq_fn> preservationMap;
++  std::unordered_map<PreserveBlock, std::vector<u8>, preserve_hash_fn, preserve_eq_fn>
++      preservationMap;
+@@ -37 +32,0 @@ private:
+-
+@@ -42,2 +36,0 @@ private:
+-
+-
+diff --git a/Source/Core/Core/Brawlback/SlippiUtility.cpp b/Source/Core/Core/Brawlback/SlippiUtility.cpp
+index a3cb338d21..e2607d7e7a 100644
+--- a/Source/Core/Core/Brawlback/SlippiUtility.cpp
++++ b/Source/Core/Core/Brawlback/SlippiUtility.cpp
+@@ -3 +2,0 @@
+-
+@@ -7 +5,0 @@ namespace SlippiUtility
+-
+@@ -101 +98,0 @@ namespace SlippiUtility
+-
+@@ -104,4 +100,0 @@ namespace SlippiUtility
+-
+-
+-
+-
+@@ -200,2 +193 @@ namespace SlippiUtility
+-
+-}
++}  // namespace SlippiUtility
+diff --git a/Source/Core/Core/Brawlback/SlippiUtility.h b/Source/Core/Core/Brawlback/SlippiUtility.h
+index 6d4c461bc1..5b3067aafd 100644
+--- a/Source/Core/Core/Brawlback/SlippiUtility.h
++++ b/Source/Core/Core/Brawlback/SlippiUtility.h
+@@ -3 +2,0 @@
+-#include "Common/CommonTypes.h"
+@@ -5,0 +5 @@
++#include "Common/CommonTypes.h"
+@@ -15 +15,2 @@ If the Slippi team feels uncomfortable with their code being used in this projec
+-having this code in this one file makes it easier to replace it with our own logic if the need should arise.
++having this code in this one file makes it easier to replace it with our own logic if the need
++should arise.
+@@ -63 +63,0 @@ namespace SlippiUtility
+-
+@@ -71 +70,0 @@ namespace SlippiUtility
+-
+@@ -86 +85 @@ namespace SlippiUtility
+-}
++}  // namespace SlippiUtility
+diff --git a/Source/Core/Core/Brawlback/TimeSync.cpp b/Source/Core/Core/Brawlback/TimeSync.cpp
+index 444d4ef4af..87c6a83e13 100644
+--- a/Source/Core/Core/Brawlback/TimeSync.cpp
++++ b/Source/Core/Core/Brawlback/TimeSync.cpp
+@@ -28,5 +28,14 @@ bool TimeSync::shouldStallFrame(s32 currentFrame, s32 latestRemoteFrame, u8 numP
+-    #if ROLLBACK_IMPL
+-    if (frameDiff >= MAX_ROLLBACK_FRAMES) {
+-    #else
+-    if (frameDiff > FRAME_DELAY) { 
+-    #endif
++    bool frameDiffCheck;
++    if (ROLLBACK_IMPL)
++    {
++      INFO_LOG_FMT(BRAWLBACK, "ROLLBACK IS ENABLED! FRAMEDIFF: {}", dispStr.str());
++      frameDiffCheck = frameDiff >= MAX_ROLLBACK_FRAMES;
++    }
++    else
++    {
++      INFO_LOG_FMT(BRAWLBACK, "ROLLBACK IS NOT ENABLED! FRAMEDIFF: {}", dispStr.str());
++      frameDiffCheck = frameDiff > FRAME_DELAY;
++    }
++
++    if (frameDiffCheck)
++    {
+diff --git a/Source/Core/Core/Brawlback/include/brawlback-common b/Source/Core/Core/Brawlback/include/brawlback-common
+--- a/Source/Core/Core/Brawlback/include/brawlback-common
++++ b/Source/Core/Core/Brawlback/include/brawlback-common
+@@ -1 +1 @@
+-Subproject commit b1d80b47234103bdf87eed8204a7b0d60a686cfe
++Subproject commit b1d80b47234103bdf87eed8204a7b0d60a686cfe-dirty
+diff --git a/Source/Core/Core/HW/EXI/EXIBrawlback.cpp b/Source/Core/Core/HW/EXI/EXIBrawlback.cpp
+index f23b77da8d..348ef6577c 100644
+--- a/Source/Core/Core/HW/EXI/EXIBrawlback.cpp
++++ b/Source/Core/Core/HW/EXI/EXIBrawlback.cpp
+@@ -22,8 +21,0 @@ std::mutex remotePadQueueMutex = std::mutex();
+-template <class T>
+-T swap_endian(T in)
+-{
+-  char* const p = reinterpret_cast<char*>(&in);
+-  for (size_t i = 0; i < sizeof(T) / 2; ++i)
+-    std::swap(p[i], p[sizeof(T) - i - 1]);
+-  return in;
+-}
+@@ -307 +299,2 @@ void CEXIBrawlback::handleLocalPadData(u8* data)
+-  u32 frame = SlippiUtility::Mem::readWord(data, idx, 999, 0);  // properly switched endianness
++  SwapPlayerFrameDataEndianness(playerFramedata);
++  auto frame = playerFramedata.frame;
+@@ -309 +301,0 @@ void CEXIBrawlback::handleLocalPadData(u8* data)
+-  playerFramedata.frame = frame;  // properly switched endianness
+@@ -628 +620 @@ void CEXIBrawlback::handleSendInputs(u32 frame)
+-  minAckFrame = MIN(minAck
\ No newline at end of file
